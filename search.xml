<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/p/hello-world/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a><a id="more"></a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>折腾之路</category>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>简述Hexo在Typora插入图片</title>
    <url>/p/hexo-image/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>关于hexo在Typora上插入图片的相关操作，先在Typora偏好设置上进行如下图的设置。</p>
<img data-src="/p/hexo-image/39469-20200316225054107-484234981-1608458966879.png" class="">

<p>然后按照下面的步骤操作：</p>
<ol>
<li>修改<code>post_asset_folder: true</code></li>
<li>生成一篇新的文章<code>hexo new hexo-image.md</code> <a id="more"></a></li>
<li>通过Typora打开hexo-image.md并插入一张图片，这时我们可以发现，在<code>source/_posts</code>目录下，图片已经自动拷贝到hexo-image这个目录里了。</li>
<li>回到hexo-site根目录安装相关的插件<code>npm install hexo-image-link --save</code></li>
<li>这时我们就可以使用<code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</code>看看效果了。</li>
</ol>
<p><strong>这里一定要注意的是，Typora偏好设置时，复制到指定路径这里一定要选择相对路径。是<code>./$&#123;filename&#125;</code>而不是<code>../$&#123;filename&#125;</code>。/前面是一个点哦！</strong></p>
]]></content>
      <categories>
        <category>折腾之路</category>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>typora</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 建站之路</title>
    <url>/p/hexo-init/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> hexo init &lt;folder&gt;</span><br><span class="line"><span class="variable">$</span> <span class="built_in">cd</span> &lt;folder&gt;</span><br><span class="line"><span class="variable">$</span> npm install</span><br></pre></td></tr></table></figure>
<p>新建完成后，指定文件夹的目录如下：</p>
<figure class="highlight sqf"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── <span class="variable">_config</span>.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── <span class="variable">_drafts</span></span><br><span class="line">|   └── <span class="variable">_posts</span></span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure>
<a id="more"></a>

<h3 id="config-yml"><a href="#config-yml" class="headerlink" title="_config.yml"></a>_config.yml</h3><p>网站的 <a href="https://hexo.io/zh-cn/docs/configuration">配置</a> 信息，您可以在此配置大部分的参数。</p>
<h3 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h3><p>应用程序的信息。<a href="https://ejs.co/">EJS</a>, <a href="http://learnboost.github.io/stylus/">Stylus</a> 和 <a href="http://daringfireball.net/projects/markdown/">Markdown</a> renderer 已默认安装，您可以自由移除。</p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span>.json&#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;hexo-site&quot;</span>,</span><br><span class="line">  <span class="string">&quot;version&quot;</span>: <span class="string">&quot;0.0.0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;private&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">&quot;hexo&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;version&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;dependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;hexo&quot;</span>: <span class="string">&quot;^3.8.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hexo-generator-archive&quot;</span>: <span class="string">&quot;^0.1.5&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hexo-generator-category&quot;</span>: <span class="string">&quot;^0.1.3&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hexo-generator-index&quot;</span>: <span class="string">&quot;^0.2.1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hexo-generator-tag&quot;</span>: <span class="string">&quot;^0.2.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hexo-renderer-ejs&quot;</span>: <span class="string">&quot;^0.3.1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hexo-renderer-stylus&quot;</span>: <span class="string">&quot;^0.3.3&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hexo-renderer-marked&quot;</span>: <span class="string">&quot;^0.3.2&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hexo-server&quot;</span>: <span class="string">&quot;^0.3.3&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="scaffolds"><a href="#scaffolds" class="headerlink" title="scaffolds"></a>scaffolds</h3><p><a href="https://hexo.io/zh-cn/docs/writing">模版</a> 文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。</p>
<p>Hexo的模板是指在新建的文章文件中默认填充的内容。例如，如果您修改scaffold/post.md中的Front-matter内容，那么每次新建一篇文章时都会包含这个修改。</p>
<h3 id="source"><a href="#source" class="headerlink" title="source"></a>source</h3><p>资源文件夹是存放用户资源的地方。除 <code>_posts</code> 文件夹之外，开头命名为 <code>_</code> (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 <code>public</code> 文件夹，而其他文件会被拷贝过去。</p>
<h3 id="themes"><a href="#themes" class="headerlink" title="themes"></a>themes</h3><p><a href="https://hexo.io/zh-cn/docs/themes">主题</a> 文件夹。Hexo 会根据主题来生成静态页面。</p>
]]></content>
      <categories>
        <category>折腾之路</category>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>NEXT主题8.1版本安装Valine</title>
    <url>/p/hexo-next-valine-install/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>博客已经建立十多天了，一开始我是不准备开启评论的，但在几个博客圈的几个朋友的一番说辞下，还是决定把评论开启起来。</p>
<p>我其实是挺喜欢Valine的，主要是因为喜欢它的简洁。但在NEXT最新版本的主题上，已经把这个主题移除。相关的说明如下：</p>
<img data-src="/p/hexo-next-valine-install/1.png" class="">

<a id="more"></a>

<p>官方说明链接：<a href="https://github.com/next-theme/hexo-theme-next/issues/4">https://github.com/next-theme/hexo-theme-next/issues/4</a></p>
<p>对于我来说，隐私什么的都是浮云，哪个方便就怎样来吧。所以我决定还是采用Valine这个评论，毕竟国内好用的第三方评论系统就那么几个，而且我只对Valine有点了解。</p>
<h3 id="安装Valine"><a href="#安装Valine" class="headerlink" title="安装Valine"></a>安装Valine</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install next-theme&#x2F;hexo-next-valine</span><br></pre></td></tr></table></figure>
<p>把插件装好后，我们只需到主题设置里添加</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Valine</span></span><br><span class="line"><span class="comment"># For more information: https://valine.js.org, https://github.com/xCss/Valine</span></span><br><span class="line">valine:</span><br><span class="line">  enable: false</span><br><span class="line">  appId:  # your leancloud application appid</span><br><span class="line">  appKey:  # your leancloud application appkey</span><br><span class="line">  serverURLs: # When the custom domain name is enabled, fill it in here</span><br><span class="line">  placeholder: Just go go # comment box placeholder</span><br><span class="line">  avatar: mm # gravatar style</span><br><span class="line">  meta: [nick, mail, link] # Custom comment header</span><br><span class="line">  pageSize: 10 # pagination size</span><br><span class="line">  visitor: false # leancloud-counter-security is not supported for now. When visitor is set to be true, appid and appkey are recommended to be the same as leancloud_visitors&#x27; for counter compatibility. Article reading statistic https://valine.js.org/visitor.html</span><br><span class="line">  comment_count: true # If false, comment count will only be displayed in post page, not in home page</span><br><span class="line">  recordIP: false # Whether to record the commenter IP</span><br></pre></td></tr></table></figure>
<p>理论只须更改<code>appId</code>和<code>appKey</code>这两项，要注意空格问题。</p>
<h3 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h3><p>顺利安装完成后，却发现出现401这个错误，再次确认不是设置的问题。在网上寻找得知，是因为插件里引用的CDN出了问题，没办法，只好自己着手修改一下。</p>
<p>在hexo站点目录找到valine.njk这个文件，路径如下。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">node_modules/hexo-next-valine/valine.njk</span><br></pre></td></tr></table></figure>
<p>添加一行</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;script src=&quot;//cdn1.lncld.net/static/js/3.0.4/av-min.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>将jsderlivr这个CDN换成unpkg的</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">https://unpkg.com/valine@1.4.14/dist/Valine.min.js</span><br></pre></td></tr></table></figure>
<p>最终效果如下</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;%- set serverURLs = config.valine.serverURLs or &#x27;https://&#x27; + config.valine.appId.slice(0, 8) | lower + &#x27;.api.lncldglobal.com&#x27; %&#125;</span><br><span class="line">&lt;script src=&quot;//cdn1.lncld.net/static/js/3.0.4/av-min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">NexT.utils.loadComments(&#x27;#valine-comments&#x27;, () =&gt; &#123;</span><br><span class="line">  NexT.utils.getScript(&#x27;https://unpkg.com/valine@1.4.14/dist/Valine.min.js&#x27;, () =&gt; &#123;</span><br><span class="line">    new Valine(Object.assign(&#123;&#123; config.valine | safedump &#125;&#125;, &#123;</span><br><span class="line">      el: &#x27;#valine-comments&#x27;,</span><br><span class="line">      path: &#123;&#123; url_for(page.path) | replace(r/index\.html$/, &#x27;&#x27;) | safedump &#125;&#125;,</span><br><span class="line">      serverURLs: &#123;&#123; serverURLs | safedump &#125;&#125;</span><br><span class="line">    &#125;));</span><br><span class="line">  &#125;, window.Valine);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>




]]></content>
      <categories>
        <category>折腾之路</category>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>next</tag>
        <tag>valine</tag>
      </tags>
  </entry>
  <entry>
    <title>HUGO文章目录BUG</title>
    <url>/p/hugo-toc/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>最近有个朋友向我问起一个关于文章目录树的问题，他使用的博客程序是HUGO，他说他下载的主题已经带有文章目录这个功能了，可不知为什么只会显示H2、H3这两级的目录，后面的H4、H5、H6直接隐藏了，根本就不能显示，由于我没有使用过HUGO这个系统，所以一时半会真不能为他解答。</p>
<p>因为他说能显示H2、H3这两级，那说明主题构建的文章目录这个功能是没有问题的，肯定是因为某个设置才导致其他级别的标题出错，去官网查询了下，还真让我发现了问题所在。<a id="more"></a></p>
<p>导致我朋友这个问题的出现应该是因为HUGO在0.60版本更新时更换了渲染器，然而他使用的主题又没有对此进行相应的更新与说明。话说现在都已经0.80版本了，问题居然还在，看来用HUGO的人还是相对少了点。根据官网的提示，我们只需在配置文件里添加以下代码即可解决。</p>
<p>在<code>config.toml</code>添加</p>
<figure class="highlight toml"><table><tr><td class="code"><pre><span class="line"><span class="section">[markup]</span></span><br><span class="line">  <span class="section">[markup.tableOfContents]</span></span><br><span class="line">    <span class="attr">endLevel</span> = <span class="number">3</span></span><br><span class="line">    <span class="attr">ordered</span> = <span class="literal">false</span></span><br><span class="line">    <span class="attr">startLevel</span> = <span class="number">2</span></span><br></pre></td></tr></table></figure>
<p>代码中<code>startLevel = 2</code>的意思从H2开始，<code>endLevel = 3</code>到H3结束。所以这里要按自己的需求来修改即可。</p>
]]></content>
      <categories>
        <category>折腾之路</category>
      </categories>
      <tags>
        <tag>-hugo</tag>
      </tags>
  </entry>
  <entry>
    <title>群晖安装transmission以及相关注意事项</title>
    <url>/p/synology-install-transmission/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="Transmission-与-Download-Station-是什么关系？"><a href="#Transmission-与-Download-Station-是什么关系？" class="headerlink" title="Transmission 与 Download Station 是什么关系？"></a>Transmission 与 Download Station 是什么关系？</h3><ul>
<li><p>Transmission 在群晖系统中默认是没有安装的，也不属于群晖官方出品的软件，它由第三方社群维护；</p>
</li>
<li><p>Download Station 是群晖自带的下载软件，它可以下载除了BT以外的其他内容，如：http, ftp 等；只是它的BT功能是由封装到内部的 Transmission 来实现；</p>
</li>
<li><p>所以他们不是一个东西！<a id="more"></a></p>
</li>
<li><p>所以他们不是一个东西！</p>
</li>
<li><p>所以他们不是一个东西！</p>
</li>
</ul>
<h3 id="安装Transmission"><a href="#安装Transmission" class="headerlink" title="安装Transmission"></a>安装Transmission</h3><ol>
<li>打开群晖套件中心–&gt;设置–&gt;常规选项，信任层级下的允许安装以下发行者发布的套件：选择任何发行者。</li>
<li>套件来源–&gt;新增–&gt;名称随意–&gt;位置上填入<a href="https://packages.synocommunity.com/">https://packages.synocommunity.com</a></li>
<li>这时我们就可以在社群上找到Transmission这个套件了，下载安装即可。</li>
<li>安装时要设置一下路径和设置一个登陆Transmission Web的账号密码，完成后启动套件就可以在浏览器上输入http://群晖的IP:9091进行访问Transmission Web界面。</li>
</ol>
<h3 id="汉化Transmission-Web界面"><a href="#汉化Transmission-Web界面" class="headerlink" title="汉化Transmission Web界面"></a>汉化Transmission Web界面</h3><p>因为Transmission Web界面默认是英文，而且个人认为奇丑无比，严重影响使用，故我们接下来要对其进行汉化一下。</p>
<h4 id="如何安装（SSH方式）"><a href="#如何安装（SSH方式）" class="headerlink" title="如何安装（SSH方式）"></a>如何安装（SSH方式）</h4><ul>
<li>安装之前<ul>
<li>请确认系统已安装 Transmission；</li>
<li>请确认你是否有 root 用户权限；</li>
</ul>
</li>
</ul>
<h4 id="获取最新的安装脚本"><a href="#获取最新的安装脚本" class="headerlink" title="获取最新的安装脚本"></a>获取最新的安装脚本</h4><ul>
<li>使用终端以 <code>admin</code> 用户登录到你的NAS，获取root权限， <code>sudo -i</code>；</li>
<li>获取最新的安装脚本：</li>
</ul>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">wget https:<span class="regexp">//gi</span>thub.com<span class="regexp">/ronggang/</span>transmission-web-control<span class="regexp">/raw/m</span>aster<span class="regexp">/release/i</span>nstall-tr-control-cn.sh</span><br></pre></td></tr></table></figure>
<ul>
<li>国内用户可使用 <code>gitee</code> 镜像地址（下同）：</li>
</ul>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">wget https:<span class="regexp">//gi</span>tee.com<span class="regexp">/culturist/</span>transmission-web-control<span class="regexp">/raw/m</span>aster<span class="regexp">/release/i</span>nstall-tr-control-gitee.sh</span><br></pre></td></tr></table></figure>
<ul>
<li>请留意执行结果，如果出现 <code>install-tr-control-cn.sh.1</code> 之类的提示，表示文件已存在，请使用 <code>rm install-tr-control-cn.sh*</code> 删除之前的脚本再重新执行上面的命令；</li>
<li>如果提示 <code>https</code> 获取失败，请使用以下命令获取安装脚本：</li>
</ul>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">wget https:<span class="regexp">//gi</span>thub.com<span class="regexp">/ronggang/</span>transmission-web-control<span class="regexp">/raw/m</span>aster<span class="regexp">/release/i</span>nstall-tr-control-cn.sh --no-check-certificate</span><br></pre></td></tr></table></figure>
<ul>
<li>如果提示文件已存在，可以通过 <code>rm install-tr-control-cn.sh</code> 进行删除后再执行下载；或者在 <code>wget</code> 后面添加 <code>-N</code> 参数，如：</li>
</ul>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">wget -N https:<span class="regexp">//gi</span>thub.com<span class="regexp">/ronggang/</span>transmission-web-control<span class="regexp">/raw/m</span>aster<span class="regexp">/release/i</span>nstall-tr-control-cn.sh --no-check-certificate</span><br></pre></td></tr></table></figure>
<h4 id="执行安装脚本"><a href="#执行安装脚本" class="headerlink" title="执行安装脚本"></a>执行安装脚本</h4><ul>
<li>执行安装脚本（如果系统不支持 <code>bash</code> 命令，请尝试将 <code>bash</code> 改为 <code>sh</code> ）：</li>
</ul>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">bash install-<span class="keyword">tr</span>-control-<span class="keyword">cn</span>.<span class="keyword">sh</span></span><br></pre></td></tr></table></figure>
<ul>
<li>如果出现 <code>Permission denied</code> 之类的提示，表示没有权限，可尝试添加执行权限：</li>
</ul>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">chmod +<span class="keyword">x</span> install-<span class="keyword">tr</span>-control-<span class="keyword">cn</span>.<span class="keyword">sh</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p>如果命令成功执行，将出现以下界面：</p>
<p><img data-src="https://github.com/ronggang/transmission-web-control/wiki/images/install-tr-control-cn.png" alt="install-tr-control-cn"></p>
</li>
<li><p>按照提示，输入相应的数字，按回车即可；</p>
</li>
<li><p>如果无法正常显示中文，请尝试设置SSH客户端编码为 <code>UTF-8</code> ，如依然不能显示中文，请下载并使用英文安装脚本 <code>install-tr-control.sh</code></p>
</li>
</ul>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">wget https:<span class="regexp">//gi</span>thub.com<span class="regexp">/ronggang/</span>transmission-web-control<span class="regexp">/raw/m</span>aster<span class="regexp">/release/i</span>nstall-tr-control.sh --no-check-certificate</span><br></pre></td></tr></table></figure>
<ul>
<li>安装完成后，用浏览器访问 Transmission Web Interface（如：<a href="http://192.168.1.1:9091/">http://192.168.1.1:9091/</a> ）即可看到新的界面；如果无法看到新界面，可能是浏览器缓存了，请按 <code>Ctrl + F5</code> 强制刷新页面或 <a href="https://jingyan.baidu.com/article/8065f87fc59f1723312498f1.html">清空缓存</a> 后再重新打开；</li>
<li>如果在知道自己的 Transmission Web 所在目录，也可以在安装脚本后面直接加路径，以避免搜索，如：</li>
</ul>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">bash install-tr-control-cn.sh <span class="regexp">/usr/</span>local<span class="regexp">/transmission/</span>share/transmission</span><br></pre></td></tr></table></figure>
<ul>
<li>注意，路径最后 <strong><code>不要</code></strong> 加 <code>web</code> ；</li>
</ul>
<h4 id="如何更新"><a href="#如何更新" class="headerlink" title="如何更新"></a>如何更新</h4><ul>
<li><p>以下几种情况，需要更新 Transmission Web Control：</p>
<ul>
<li>Transmission 重新安装或升级之后；</li>
<li>Transmission Web Control 版本更新时；</li>
</ul>
</li>
<li><p>如何更新：</p>
<ul>
<li>如果之前已经下载过安装脚本，只需要在安装脚本所在目录执行一次脚本即可：</li>
</ul>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">sudo bash install-<span class="keyword">tr</span>-control-<span class="keyword">cn</span>.<span class="keyword">sh</span>	</span><br></pre></td></tr></table></figure>
<ul>
<li>如果没有下载过安装脚本，或脚本有更新时，请参考安装方式重新下载安装脚本执行安装即可。</li>
</ul>
</li>
</ul>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>安装和更新中文界面时可能会报错<code>Couldn&#39;t find Transmission&#39;s web interface files!</code>，这时我们可以下载最新的源码包：<a href="https://github.com/ronggang/transmission-web-control/archive/master.zip">下载</a>，然后用Winscp登陆NAS，协议选择scp，账号要用admin，找到/usr/local/transmission/share/transmission/web这个目录，然后将刚下载的汉化包里面的src目录下所有文件上传到web这个目录里即可，如上传时报错，可先将/usr/local/transmission/share/transmission/web目录下的index.html改名为index.html.bak。</p>
<p>最后，要注意权限问题，这里我们获取root权限后可以将web目录的权限修改一下，如：<code>chmod 777 /usr/local/transmission/share/transmission/web</code>。</p>
]]></content>
      <categories>
        <category>折腾之路</category>
      </categories>
      <tags>
        <tag>群晖</tag>
        <tag>NAS</tag>
        <tag>transmission</tag>
      </tags>
  </entry>
  <entry>
    <title>利用群晖里的VPN Server套件实现外网访问内网里的设置</title>
    <url>/p/synology-nas-vps-server/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>因为我个人的原因，在外需要使用到家里的内网进行操作安装在群晖NAS安装的虚拟机系统，所以今天就来说说在群晖NAS上安装VPN Server实现外网访问家里的内网。</p>
<h3 id="选择的理由"><a href="#选择的理由" class="headerlink" title="选择的理由"></a>选择的理由</h3><p>其实实现外网访问内网的方法有很多，但我还是选择VPN这个方法的主要原因有下：</p>
<ul>
<li>方便。在群晖NAS上安装好套件进行简单的设置后，在需要远程访问的电脑安装好VPN的客户端就可以访问家里内网上的设备，如NAS、路由器、虚拟机等设备。</li>
<li>安全。我们只需要在公网上公放VPN的端口，不用每个设备的端口都进行转发，因为内网间使用端口不用在路由器上进行端口转发，大大的提高了安全性。加上端口开放得太多也很难管理，特别是时间久了后。<a id="more"></a></li>
</ul>
<h3 id="安装VPN服务端套件"><a href="#安装VPN服务端套件" class="headerlink" title="安装VPN服务端套件"></a>安装VPN服务端套件</h3><p>大家都知道群晖是买系统送主机的，由此可以想到这个系统的便捷性，我们直接在套件中心上搜索“VPN”，选择VPN Server这个套件进行安装即可，安装完成后我们就可以在左上角的主菜单里找到安装完成的VPN Server了。</p>
<img data-src="/p/synology-nas-vps-server/2020-12-23-19-03-28.png" class="">

<p>打开套件我们可以发现左下角有三个VPN类型供我们选择，这里我们选择相对安全的OpenVPN。至于这三个类型之间的区别可以自己进行搜索查询。</p>
<img data-src="/p/synology-nas-vps-server/2020-12-23-191814.png" class="">

<h4 id="OpenVPN相关设置"><a href="#OpenVPN相关设置" class="headerlink" title="OpenVPN相关设置"></a>OpenVPN相关设置</h4><ol>
<li>启动 Open VPN 服务器。</li>
<li>设置动态IP地址。这里需要详细说明一下，我家里的网关是<code>10.10.10.1</code>，所以只要我家里的设备在<code>10.10.10.*</code>这个网段里，设备间都可以进行通信。故在动态IP地址这里我们是不可以直接使用<code>10.10.10.1</code>，避免和网关冲突，我们选择<code>10.10.11.1</code>这个网段，这样一旦我们通过VPN进行连接时，设备就可以分配到<code>10.10.11.*</code>这个网段。但这时因为网段的不同，我们还不能直接通过VPN来访问家里的设备，这里我们需要将<strong>允许客户端访问服务器的LAN</strong>这个选项勾选。</li>
<li>端口。默认是1194，这里可以自行设置，但在端口转发时的内网端口一定要和你修改的一样。</li>
<li>其他选项保持默认就好。点击应用，这时会提示我们要将1194这个默认端口进行用UDP协议进行转发。</li>
<li>权限。这里默认是允许群晖里的所有用户都可以访问VPN Server，你可以根据你自己的实际情况来设定。</li>
<li>导出配置文件，等下配置客户端时可以导入配置。</li>
</ol>
<img data-src="/p/synology-nas-vps-server/2020-12-23-212450.png" class="">

<ol start="7">
<li>到路由器进行端口转发的设置。内网地址写入<code>你群晖的内网IP</code>，比如我的是<code>10.10.10.8</code>。内网端口<code>1194</code>，如果你在VPN Server修改了端口，这里填入<code>你修改的端口</code>。协议选择<code>UDP</code>，外网地址勾引全部，外网端口<code>1194</code>，如果你选择映射成其他的端口，配置VPN客户端时要与此时填入的外网端口一样。</li>
<li>这样服务端的设置已经完成。</li>
</ol>
<h3 id="配置VPN客户端"><a href="#配置VPN客户端" class="headerlink" title="配置VPN客户端"></a>配置VPN客户端</h3><p>上文提到导出配置文件，我们得一个<code>openvpn.zip</code>的压缩文件，把它解压，我们可以两个证书文件，一个README文本，一个<code>VPNConfig.ovpn</code>。我们要的就是这个后缀为.ovpn的文件，当然我们要稍微修改一下才能直接使用。</p>
<img data-src="/p/synology-nas-vps-server/2020-12-23-225212.png" class="">

<p>用记事本打开，将YOUR_SERVER_IP修改成家里的公网IP或者使用DDNS绑定的域名，这里建议使用域名，因为公网IP在路由器重启后就会变更，万一家里断电导致路由器重启，此配置就会失效，然而DDNS正好能完美解决这样的问题。</p>
<p>后面的1194就是刚才端口转发设置时映射的外网端口，如果你使用的是默认的1194端口，这里不用修改，保存退出。</p>
<p>接下来我们在要使用远程访问家里内网的机器上下载一个OpenVPN的客户端，浏览器输入官网地址<a href="https://openvpn.net/">https://openvpn.net</a>，点击<code>GET OPENVPN</code></p>
<img data-src="/p/synology-nas-vps-server/2020-12-23-231653.png" class="">

<p>选择相应的系统进行下载即可。</p>
<h3 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h3><p>我拿手机简单的演示一下导入过程，至于下载与安装<code>Open VPN</code>的过程就略过了。</p>
<img data-src="/p/synology-nas-vps-server/Screenshot_20201223-232659.jpg" class="">

<p>打开软件，点击左上角的<code>Profiles</code>菜单。</p>
<img data-src="/p/synology-nas-vps-server/Screenshot_20201223-232748.jpg" class="">

<p>选择第一项<code>Import Profile</code></p>
<img data-src="/p/synology-nas-vps-server/Screenshot_20201223-232839.jpg" class="">

<p>选择<code>FILE</code>，找到事先导出并复制到手机上的<code>VPNConfig.ovpn</code>文件，点击<code>IMPORT</code></p>
<img data-src="/p/synology-nas-vps-server/Screenshot_20201223-234133.jpg" class="">

<img data-src="/p/synology-nas-vps-server/Screenshot_20201223-234306.jpg" class="" title="Screenshot_20201223-234306">

<p>点击右边的笔图标进行编辑，输入群晖系统的用户和密码，这里注意上文提到的权限问题，VPN Server默认是给群晖所有用户都开放了访问权限的。输入完后点击右上边的<code>SAVE</code>。</p>
<p>点击左边的开关按钮，这样我们就使用VPN顺利的连接回家里内网了。</p>
<p>至于其他客户端配置的方法这里就不一一列举，毕竟一理通百理，如实在还是不懂的请自行搜索相关资料。</p>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>通过VPN连接回家里的内网后，平时我们在家里的操作都能远程起来，而且比其他方法都要简单，单单不用开放家里所有设备的端口这一条，就值得我们使用此方法。毕竟端口开放多了，被扫的机率就更高，危险系数也随之变高。</p>
]]></content>
      <categories>
        <category>折腾之路</category>
      </categories>
      <tags>
        <tag>群晖</tag>
        <tag>NAS</tag>
        <tag>VPN</tag>
      </tags>
  </entry>
  <entry>
    <title>脚本从Windows复制到Linux上使用时报错的解决方法</title>
    <url>/p/windows-sh-linux-bin-bash-error/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>不知道大家有没有遇到这样的情况，在Windows上编写了一些脚本命令，使用起来正常，可当我们把这个脚本复制到Linux上使用时却出现下面的问题。</p>
<img data-src="/p/windows-sh-linux-bin-bash-error/2020-12-21-17-53-40.png" class="">

<a id="more"></a>

<p>具体的原因是文件格式的问题，我们可以进行相应的修改。方法有下面两种：</p>
<ol>
<li>利用vim打开脚本文件，执行<code>:set fileformat=unix</code>后<code>:wq</code>保存</li>
<li>直接执行<code>sed -i &quot;s/\r//&quot; deploy.sh</code>进行转化</li>
</ol>
<p>这样我们再<code>./deploy.sh</code>执行脚本就能正常运行起来了。</p>
]]></content>
      <categories>
        <category>折腾之路</category>
      </categories>
      <tags>
        <tag>脚本</tag>
      </tags>
  </entry>
</search>
